# utils

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'

hook_add = '''
nmap <Plug>[Space]<Space> :<C-u>Denite menu<CR>
nmap <Plug>[Space]db :<C-u>Denite buffer<CR>

nnoremap <silent> <C-p> :<C-u>Denite
      \ `finddir('.git', ';') != '' ? 'file/rec/git' : 'file/rec'`<CR>

'''

[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = 'Deol'
depends = 'denite.nvim'

[[plugins]]
repo = 'kmnk/denite-dirmark'
on_source = 'denite.nvim'

[[plugins]]
repo = 'pocari/vim-denite-emoji'
on_source = 'denite.nvim'

# html/css

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html','css','htmldjango','vue', 'pug', "eruby", "typescriptreact", "xml"]
hook_source = '''
let g:user_emmet_settings = {
\ 'variables': {
\  'lang': 'ja',
\ },
\ 'vue': {
\  'filters': 'html',
\ }
\}
'''

[[plugins]]
repo = "othree/html5.vim"
on_ft = ["html", "vue"]

[[plugins]]
repo = 'digitaltoad/vim-pug'
on_ft = ["pug", "vue"]

[[plugins]]
repo = 'nikvdp/ejs-syntax'
on_ft = ["ejs"]

[[plugins]]
repo = "hail2u/vim-css3-syntax"
on_ft = ["css", "vue"]

# javascript

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript']
hook_source = '''
autocmd FileType javascript setlocal indentkeys+=.
autocmd FileType javascript setlocal foldmethod=syntax
'''

# [[plugins]]
# repo = 'mxw/vim-jsx'
# on_ft = ['javascript', 'vue']

[[plugins]]
repo = "MaxMEllon/vim-jsx-pretty"
on_ft = ["javascript", "jsx"]

[[plugins]]
repo = 'ternjs/tern_for_vim'
on_ft = ['javascript', 'vue']
if = 'executable("npm")'
build = 'npm install'
hook_source = '''
" autocmd FileType javascript setlocal completeopt+=menuone,preview
autocmd FileType javascript nmap <buffer> <C-]> :TernDef<CR>
'''

[[plugins]]
repo = 'posva/vim-vue'
on_ft = 'vue'
hook_add = """
autocmd FileType vue syntax sync fromstart
"""

[[plugins]]
on_ft = ["typescript", "typescriptreact", "vue"]
repo = "leafgarland/typescript-vim"
hook_source = '''
autocmd FileType typescript setlocal indentkeys+=0.
'''
if = "v:false"

[[plugins]]
on_ft = ["typescript", "typescriptreact", "vue"]
repo = "HerringtonDarkholme/yats.vim"

[[plugins]]
if = "has('nvim') && v:false"
repo = 'mhartington/nvim-typescript'
build = "./install.sh"
# on_ft = ['typescript', "typescriptreact", 'vue']
hook_add = '''
let $TSS_LOG="-level verbose -logToFile true -file /home/virus/tmp/tsserver.log"
'''
hook_source = '''
let g:nvim_typescript#vue_support = 0
function! s:TypescriptKeymap() abort
  noremap <buffer> <silent> K :<C-u>TSDoc<CR>
  noremap <buffer> <silent> gd :<C-u>TSDef<CR>
endfunction
augroup VirusVimPlugins
  autocmd FileType typescript,typescript.tsx call s:TypescriptKeymap()
augroup END
'''

[[plugins]]
repo = "kchmck/vim-coffee-script"
on_ft = ["coffee"]

# python

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = ['python', 'xonsh']
build = 'git submodule update --init --recursive'
hook_add = '''
let g:jedi#completions_enabled = 0
'''

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = ['python', 'xonsh']

[[plugins]]
repo = 'jmcantrell/vim-virtualenv'
on_ft = 'python'
hook_add = '''
let g:virtualenv_auto_activate = 1
'''

# go

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'

# ruby

[[plugins]]
repo = "vim-ruby/vim-ruby"
on_ft = ["ruby"]

[[plugins]]
on_ft = ["ruby", "eruby"]
repo = "tpope/vim-rails"

[[plugins]]
on_ft = ["ruby"]
repo = "tpope/vim-bundler"

[[plugins]]
repo = "5t111111/denite-rails"
on_ft = ["ruby", "eruby"]

# Lisp

# [[plugins]]
# on_ft = ["lisp"]
# repo = "l04m33/vlime"
# rtp = "vim/"
# hook_add = """
# let g:vlime_cl_impl = "ros"
# function! VlimeBuildServerCommandFor_ros(vlime_loader, vlime_eval)
#   return ["ros", "run",
#         \ "--load", a:vlime_loader,
#         \ "--eval", a:vlime_eval]
# endfunction
# """

[[plugins]]
repo = "kovisoft/slimv"
on_ft = ["lisp", "scheme"]
hook_add = '''
" let g:slimv_swank_cmd = "!xterm -e \"ros -e '(ql:quickload :swank) (swank:create-server)' wait \"&"
" let g:slimv_lisp = 'ros run'
" let g:slimv_impl = 'sbcl'
'''


# SPARQL/RDF

[[plugins]]
repo = 'atextor/sparql.vim'
on_ft = 'sparql'

[[plugins]]
repo = 'niklasl/vim-rdf'

# Swift/iOS

[[plugins]]
if = 'executable("swift")'
repo = 'keith/swift.vim'
on_ft = ['swift']

[[plugins]]
if = 'has("nvim") && executable("swift")'
repo = 'mitsuse/autocomplete-swift'

# Other

[[plugins]]
repo = 'vim-scripts/nginx.vim'
on_ft = ['nginx']

# [[plugins]]
# repo = "chrisbra/csv.vim"
# on_ft = ["csv"]

[[plugins]]
repo = 'kylef/apiblueprint.vim'
on_ft = ["apiblueprint"]
hook_add = '''
autocmd FileType apiblueprint setlocal tabstop=4 softtabstop=4 shiftwidth=4
'''

[[plugins]]
repo = "chaimleib/vim-renpy"
on_ft = ["renpy"]

# JSON
[[plugins]]
on_ft = ["json"]
repo = "Quramy/vison"

# Haskell
[[plugins]]
on_ft = ["haskell"]
repo = 'neovimhaskell/haskell-vim'

[[plugins]]
on_ft = ["haskell"]
repo = 'eagletmt/neco-ghc'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim']

[[plugins]]
repo = 'PProvost/vim-ps1'
on_ft = ['ps1']

# deoplete
[[plugins]]
if = 'v:false'
repo = "Shougo/deoplete.nvim"
depends = ["context_filetype.vim"]
on_event = "InsertEnter"
hook_source="""
call deoplete#enable()
let g:deoplete#sources#omni#input_patterns = {
        \   "ruby" : '[^. *\t]\.\w*\|\h\w*::',
        \}
inoremap <expr> <C-b>d deoplete#mappings#manual_complete()
"""

[[plugins]]
if = 'v:false'
repo = "carlitux/deoplete-ternjs"
on_ft = ["javascript", "vue"]
hook_add = """
let g:deoplete#sources#ternjs#filetypes = ['vue']
let g:tern#command = ["tern"]
let g:tern#arguments = ["--persistent"]
"""

[[plugins]]
if = 'v:false'
repo = 'deoplete-plugins/deoplete-jedi'
on_ft = ["python", "xonsh"]
if = 'has("nvim")'

[[plugins]]
if = 'v:false'
repo = "deoplete-plugins/deoplete-go"
on_ft = 'go'

[[plugins]]
if = 'v:false'
repo = "uplus/deoplete-solargraph"
on_ft = ["ruby", "eruby"]

[[plugins]]
if = 'v:false'
repo = 'deoplete-plugins/deoplete-zsh'
on_ft = ['zsh']
