# utils

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'previm/previm'
on_cmd = 'PrevimOpen'
depends = 'open-browser.vim'

## denite
[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
rev = 'master'
hook_add = '''
nmap <Plug>[Space]<Space> :<C-u>Denite menu<CR>
nmap <Plug>[Space]db :<C-u>Denite buffer<CR>

nnoremap <silent> <C-p> :<C-u>Denite
      \ `finddir('.git', ';') != '' ? 'file/rec/git' : 'file/rec'`<CR>

" Define mappings
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
        \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
        \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
        \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
        \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
        \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
        \ denite#do_map('toggle_select').'j'
  nnoremap <silent><buffer><expr> <Tab>
        \ denite#do_map('choose_action')
endfunction
'''

[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = 'Deol'
depends = 'denite.nvim'

[[plugins]]
repo = 'kmnk/denite-dirmark'
on_source = 'denite.nvim'

[[plugins]]
repo = 'pocari/vim-denite-emoji'
on_source = 'denite.nvim'

# html/css

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html','css','htmldjango','vue', 'pug', "eruby", "typescriptreact", "xml"]
hook_source = '''
let g:user_emmet_settings = {
\ 'variables': {
\  'lang': 'ja',
\ },
\ 'vue': {
\  'filters': 'html',
\ }
\}
'''

[[plugins]]
repo = 'digitaltoad/vim-pug'
on_ft = ["pug", "vue"]

[[plugins]]
repo = 'nikvdp/ejs-syntax'
on_ft = ["ejs"]

# javascript

[[plugins]]
repo = "kchmck/vim-coffee-script"
on_ft = ["coffee"]

# python
[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = ['python', 'xonsh']

[[plugins]]
repo = 'jmcantrell/vim-virtualenv'
on_ft = 'python'
hook_add = '''
let g:virtualenv_auto_activate = 1
'''

# go

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'

# ruby

[[plugins]]
repo = "vim-ruby/vim-ruby"
on_ft = ["ruby"]

[[plugins]]
on_ft = ["ruby", "eruby"]
repo = "tpope/vim-rails"

[[plugins]]
on_ft = ["ruby"]
repo = "tpope/vim-bundler"

[[plugins]]
repo = "5t111111/denite-rails"
on_ft = ["ruby", "eruby"]

# Lisp

# [[plugins]]
# on_ft = ["lisp"]
# repo = "l04m33/vlime"
# rtp = "vim/"
# hook_add = """
# let g:vlime_cl_impl = "ros"
# function! VlimeBuildServerCommandFor_ros(vlime_loader, vlime_eval)
#   return ["ros", "run",
#         \ "--load", a:vlime_loader,
#         \ "--eval", a:vlime_eval]
# endfunction
# """

[[plugins]]
repo = "kovisoft/slimv"
on_ft = ["lisp", "scheme"]
hook_add = '''
" let g:slimv_swank_cmd = "!xterm -e \"ros -e '(ql:quickload :swank) (swank:create-server)' wait \"&"
" let g:slimv_lisp = 'ros run'
" let g:slimv_impl = 'sbcl'
'''

# SPARQL/RDF

[[plugins]]
repo = 'niklasl/vim-rdf'

# Swift/iOS

[[plugins]]
if = 'executable("swift")'
repo = 'keith/swift.vim'
on_ft = ['swift']

[[plugins]]
if = 'has("nvim") && executable("swift")'
repo = 'mitsuse/autocomplete-swift'

# Other

[[plugins]]
repo = 'vim-scripts/nginx.vim'
on_ft = ['nginx']

# [[plugins]]
# repo = "chrisbra/csv.vim"
# on_ft = ["csv"]

[[plugins]]
repo = 'kylef/apiblueprint.vim'
on_ft = ["apiblueprint"]
hook_add = '''
autocmd FileType apiblueprint setlocal tabstop=4 softtabstop=4 shiftwidth=4
'''

[[plugins]]
repo = "chaimleib/vim-renpy"
on_ft = ["renpy"]

# JSON
[[plugins]]
on_ft = ["json"]
repo = "Quramy/vison"

# Haskell
[[plugins]]
on_ft = ["haskell"]
repo = 'neovimhaskell/haskell-vim'

[[plugins]]
on_ft = ["haskell"]
repo = 'eagletmt/neco-ghc'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim']

[[plugins]]
repo = 'PProvost/vim-ps1'
on_ft = ['ps1']

[[plugins]]
repo = 'elixir-editors/vim-elixir'
on_ft = ['elixir']
if = 'executable("elixir")'
