[[plugins]]
repo = 'Shougo/dein.vim'

# core
[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
if = 'has("python3")'
repo = "roxma/nvim-yarp"

[[plugins]]
if = '!has("nvim") && (has("python") || has("python3"))'
repo = "roxma/vim-hug-neovim-rpc"

# util
[[plugins]]
repo = 'sjl/gundo.vim'
if = 'has("python") || has("python3")'
hook_add = '''
if has("python3")
 let g:gundo_prefer_python3 = 1
endif
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'Shougo/Unite.vim'

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'Unite.vim'
hook_add = '''
"call vimfiler#custom#profile('default', 'context', {
"  \ 'safe' : 0,
"  \})
   nmap <F3> :VimFiler -simple -winwidth=30 -toggle -buffer-name=explorer -split -no-quit<CR>
'''

[[plugins]]
repo = 'Shougo/unite-outline'
depends = 'Unite.vim'

[[plugins]]
repo = "Shougo/defx.nvim"
hook_add = '''
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
        \ defx#do_action('open')
  nnoremap <silent><buffer><expr> K
        \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
        \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> h
        \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
        \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> <Space>
        \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> j
        \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
        \ line('.') == 1 ? 'G' : 'k'
endfunction
'''

# help doc
[[plugins]]
repo = 'vim-jp/vimdoc-ja'

# filetypes
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# colorscheme
[[plugins]]
repo = 'sjl/badwolf'

[[plugins]]
repo = "cocopon/iceberg.vim"

[[plugins]]
repo = "morhetz/gruvbox"

# Git

[[plugins]]
repo = 'tpope/vim-fugitive'


[[plugins]]
repo = 'tmux-plugins/vim-tmux'

[[plugins]]
repo = 'w0rp/ale'
hook_add = """
let g:ale_lint_on_filetype_changed = 0
let g:ale_lint_on_text_changed = "never"
let g:ale_linters = {
      \ "vue" : ["eslint"]
      \}
let g:ale_fixers = {
      \ 'python': [
      \     'autopep8'
      \ ],
      \ 'ruby': [
      \     'rubocop'
      \ ],
      \ 'javascript': [
      \     'eslint'
      \ ],
      \ 'typescript': [
      \    'eslint',
      \    'tslint',
      \ ],
      \ 'vue': [
      \    'eslint'
      \ ],
      \}
"""

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
lazy = 1
depends = 'context_filetype.vim'
hook_add = """
let g:precious_enable_switchers = {
      \ "vue" : {
      \         "setfiletype": 0
      \ },
      \ "*" : {
      \         "setfiletype": 1
      \ },
      \}
" let g:precious_enable_switch_CursorMoved = {
"       \	"vue" : 0
"       \}
" let g:precious_enable_switch_CursorMoved_i = {
"       \	"vue" : 0
"       \}
" augroup MyDeinPrecious
"   autocmd!
"   autocmd User PreciousFileType call s:only_switch_syntax_when_vue()
" augroup END

function! s:only_switch_syntax_when_vue() abort
  let l:basetype = precious#base_filetype()
  if basetype != "vue"
    return
  endif
  if precious#context_filetype() == "typescript"
    let &l:syntax = precious#context_filetype()
    return
  endif
  let &filetype = precious#context_filetype()
  call precious#set_base_filetype(l:basetype)
endfunction
"""

[[plugins]]
repo = 'majutsushi/tagbar'

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = "aklt/plantuml-syntax"

[[plugins]]
repo = "Shougo/neco-syntax"

[[plugins]]
repo = "autozimu/LanguageClient-neovim"
build="bash install.sh"
hook_add = """
let g:LanguageClient_serverCommands = {
\ "vue": ["vls"]
\ }
let g:LanguageClient_autoStart = 1

nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
"""

[[plugins]]
repo = "Shougo/neosnippet.vim"
hook_add = '''
" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets' behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
"smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" Enable snipMate compatibility feature.
" let g:neosnippet#enable_snipmate_compatibility = 1

" Expand the completed snippet trigger by <CR>.
"imap <expr><CR>
"\ (pumvisible() && neosnippet#expandable()) ?
"\ "\<Plug>(neosnippet_expand)" : "\<CR>"
'''

[[plugins]]
repo = "Shougo/neosnippet-snippets"

[[plugins]]
repo = 'alpaca-tc/alpaca_tags'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
command! PrettyCSV :%EasyAlign *, {'lm': 1, 'stl': 0}
nmap <F4> ms:PrettyCSV<CR>`s
'''

[[plugins]]
repo = "Shougo/vinarise.vim"

# Syntax
[[plugins]]
repo = 'dannywillems/vim-icalendar'

[[plugins]]
repo = 'chakrit/upstart.vim'

# Scala
[[plugins]]
repo = "derekwyatt/vim-scala"

# nyaovim
[[plugins]]
repo = "rhysd/nyaovim-markdown-preview"
