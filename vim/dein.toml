[[plugins]]
repo = 'Shougo/dein.vim'

# core
[[plugins]]
if = 'has("python3")'
repo = "roxma/nvim-yarp"

[[plugins]]
if = '!has("nvim") && (has("python") || has("python3"))'
repo = "roxma/vim-hug-neovim-rpc"

# util
[[plugins]]
repo = 'sjl/gundo.vim'
if = 'has("python") || has("python3")'
hook_add = '''
if has("python3")
 let g:gundo_prefer_python3 = 1
endif
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'Shougo/Unite.vim'

[[plugins]]
repo = 'Shougo/unite-outline'
depends = 'Unite.vim'

[[plugins]]
repo = "Shougo/defx.nvim"
hook_add = '''
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
        \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> c
        \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
        \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
        \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
        \ defx#do_action('open')
  nnoremap <silent><buffer><expr> E
        \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
        \ defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr> o
        \ defx#do_action('open_or_close_tree')
  nnoremap <silent><buffer><expr> K
        \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
        \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
        \ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C
        \ defx#do_action('toggle_columns',
        \                'mark:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
        \ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d
        \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
        \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
        \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x
        \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
        \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
        \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
        \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h
        \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
        \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
        \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
        \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
        \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
        \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
        \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
        \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
        \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
        \ defx#do_action('change_vim_cwd')
  nnoremap <silent><buffer> <F1> :<C-u>nmap <buffer><CR>
endfunction
" nmap <F3> :VimFiler -simple -winwidth=30 -toggle -buffer-name=explorer -split -no-quit<CR>
nmap <F3> :<C-u>Defx -winwidth=30 -toggle -direction=topleft -buffer-name=explorer -split=vertical<CR>
'''

# help doc
[[plugins]]
repo = 'vim-jp/vimdoc-ja'

# colorscheme
[[plugins]]
repo = 'sjl/badwolf'

[[plugins]]
repo = "cocopon/iceberg.vim"

[[plugins]]
repo = "morhetz/gruvbox"

[[plugins]]
repo = "folke/tokyonight.nvim"

# Git

[[plugins]]
repo = 'tpope/vim-fugitive'


[[plugins]]
repo = 'tmux-plugins/vim-tmux'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

# [[plugins]]
# repo = 'osyo-manga/vim-precious'
# depends = 'context_filetype.vim'
# hook_add = """
# let g:precious_enable_switchers = {
#       \ "*" : {
#       \         "setfiletype": 0
#       \ },
#       \ "toml" : {
#       \         "setfiletype": 1
#       \ },
#       \}
# " let g:precious_enable_switch_CursorMoved = {
# "       \	"vue" : 0
# "       \}
# " let g:precious_enable_switch_CursorMoved_i = {
# "       \	"vue" : 0
# "       \}
# " augroup MyDeinPrecious
# "   autocmd!
# "   autocmd User PreciousFileType call s:only_switch_syntax_when_vue()
# " augroup END
# 
# function! s:only_switch_syntax_when_vue() abort
#   let l:basetype = precious#base_filetype()
#   if basetype != "vue"
#     return
#   endif
#   if precious#context_filetype() == "typescript"
#     let &l:syntax = precious#context_filetype()
#     return
#   endif
#   let &filetype = precious#context_filetype()
#   call precious#set_base_filetype(l:basetype)
# endfunction
# """

[[plugins]]
repo = 'preservim/tagbar'

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = "aklt/plantuml-syntax"

[[plugins]]
repo = "Shougo/neco-syntax"

[[plugins]]
repo = "Shougo/neosnippet.vim"
hook_add = '''
" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
" imap <C-k>     <Plug>(neosnippet_expand_or_jump)
" smap <C-k>     <Plug>(neosnippet_expand_or_jump)
" xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets' behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
"smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" Enable snipMate compatibility feature.
" let g:neosnippet#enable_snipmate_compatibility = 1

" Expand the completed snippet trigger by <CR>.
"imap <expr><CR>
"\ (pumvisible() && neosnippet#expandable()) ?
"\ "\<Plug>(neosnippet_expand)" : "\<CR>"
'''

[[plugins]]
repo = "Shougo/neosnippet-snippets"

[[plugins]]
repo = 'alpaca-tc/alpaca_tags'
if = 'executable("ctags")'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
command! PrettyCSV :%EasyAlign *, {'lm': 1, 'stl': 0}
nmap <F4> ms:<C-u>PrettyCSV<CR>`s
'''

[[plugins]]
repo = "Shougo/vinarise.vim"

[[plugins]]
repo = "thinca/vim-prettyprint"

# Syntax
[[plugins]]
repo = 'dannywillems/vim-icalendar'

[[plugins]]
repo = 'chakrit/upstart.vim'

# Scala
[[plugins]]
repo = "derekwyatt/vim-scala"

[[plugins]]
repo = 'idanarye/vim-smile'

[[plugins]]
repo = "luochen1990/rainbow"
hook_add = '''
let g:rainbow_active = 0
'''

[[plugins]]
repo = "junegunn/vim-emoji"

[[plugins]]
repo = "kana/vim-gf-user"
hook_add = '''
function! GfFile()
  let path = expand('<cfile>')
  let line = 0
  if path =~# ':\d\+:\?$'
    let line = matchstr(path, '\d\+:\?$')
    let path = matchstr(path, '.*\ze:\d\+:\?$')
  endif
  if !filereadable(path)
    return 0
  endif
  return {
  \   'path': path,
  \   'line': line,
  \   'col': 0,
  \ }
endfunction
call gf#user#extend('GfFile', 1000)
'''

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'lewis6991/impatient.nvim'
lua_add = '''
require('impatient')
'''
